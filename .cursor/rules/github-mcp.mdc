---
description: 
globs: 
alwaysApply: true
---
# github-mcp MDC (Model Data Context) for Cursor

Description:
  github-mcp is a Model Context Protocol (MCP) server for GitHub integration, providing tools for repository, issue, pull request, and content management via FastAPI.

Project Structure:
  github_mcp/           # Main package source code
    ├── server.py       # FastAPI server entry point
    ├── tools/          # Tool handler modules
    ├── models/         # Pydantic models and schemas
  tests/                # Test suite (pytest)
  scripts/              # Shell scripts for setup, linting, testing, server
  img/                  # Project images and logos
  .github/              # GitHub workflows and config
  .cursor/              # Cursor IDE config and rules
  docs/                 # Documentation (if present)
  examples/             # Example usage/configs (if present)
  pyproject.toml        # Project metadata and dependencies
  requirements.txt      # Runtime dependencies
  requirements-dev.txt  # Dev dependencies (includes requirements.txt)
  README.md             # Project overview and usage
  LICENSE               # License file
  CHANGELOG.md          # Changelog (if present)
  CONTRIBUTING.md       # Contribution guidelines (if present)
  SECURITY.md           # Security policy (if present)

Requirements:
  - Python 3.9+
  - FastAPI, Uvicorn, PyGithub, githubauthlib, etc. (see requirements.txt)
  - pytest, black, isort, flake8 for development (see requirements-dev.txt)

[include]
github_mcp/**.py
tests/**.py
scripts/*.sh
pyproject.toml
requirements.txt
requirements-dev.txt
README.md
LICENSE
CHANGELOG.md
CONTRIBUTING.md
SECURITY.md
.github/**
.cursor/**
img/**
docs/**
examples/**
*.md

[exclude]
**/__pycache__/
**/.venv/
**/.git/
**/.DS_Store
**/*.pyc
**/.mypy_cache/
**/.pytest_cache/
**/.vscode/
**/.idea/

## Links
- https://github.com/garotm/github-mcp/wiki
- https://github.com/garotm/github-mcp/milestone/1
- https://github.com/garotm/github-mcp/issues

## Code Quality Standards

### Python Standards
- Python 3.9+ compatibility required
- Type hints for critical functions
- Basic docstrings required
- Maximum complexity score of 10
- Line length limit: 120 characters
- Test coverage minimum: 75%

### Linting and Formatting
- flake8 for linting
- black for code formatting
- isort for import sorting

### Testing Requirements
- pytest for test framework
- pytest-cov for coverage
- pytest-mock for mocking
- Basic integration tests
- Mocked external services

## Security Requirements

### Code Security
- Basic input validation
- API key handling
- Error handling required

### CI/CD Security
- Basic dependency scanning
- SonarQube Cloud integration

## Documentation Requirements

### Code Documentation
- Basic module docstrings
- Function docstrings
- Type hints for critical functions

### Project Documentation
- Installation guide
- Basic usage guide
- Configuration examples

## Development Workflow

### Git Workflow
- Feature branch workflow
- Basic PR reviews
- Semantic versioning

### CI/CD Pipeline
- Basic automated testing
- Code quality checks
- SonarQube analysis

## Package Requirements

### Core Features
- Basic test configuration
- Contest management
- Template support
- Configuration validation

### Integration Features
- Catchpoint API client
- Basic template support
- Configuration validation

## Configuration Standards

### YAML Configuration
- Basic schema validation
- Template support
- Validation rules

### CLI Interface
- Basic command structure
- Error reporting
- Help documentation

## Quality Gates

### Code Quality
- SonarQube Cloud analysis
- Basic coverage requirements
- No critical security issues

### Release Quality
- All tests passing
- Basic coverage requirements met
- Documentation updated

## Dependencies

### Production Dependencies
- pyyaml>=6.0
- click>=8.0
- jsonschema>=4.0.0

### Development Dependencies
- pytest>=7.0.0
- flake8>=4.0.0
- black>=22.0.0
- isort>=5.0.0
